;; original source
(define (make-table)
  (let ((local-table (list '*table*)))
    ;; basic operations of binary tree
    ;; node : (list key value left-branch right-branch)
    (define (get-key node) (car node))
    (define (get-value node) (cadr node))
    (define (left-branch node) (caddr node))
    (define (right-branch node) (cadddr node))
    (define (make-node key value left right)
      (list key value left right))

    (define (element-of-tree key tree)
      (cond ((null? tree) #f)
            ((= key (get-key tree)) (get-value tree))
            ((< key (get-key tree))
             (element-of-tree key (left-branch tree)))
            ((> key (get-key tree))
             (element-of-tree key (right-branch tree)))))

    (define (adjoin-tree key value tree)
      (cond ((null? tree) (make-node key value '() '()))
            ((= key (get-key tree))
             ;ignore same key;(set-cdr! tree (list value (left-branch tree) (right-branch tree))))
             tree)
            ((< key (get-key tree))
             (make-node (get-key tree)
                        (get-value tree)
                        (adjoin-tree key value (left-branch tree))
                        (right-branch tree)))
            ((> key (get-key tree))
             (make-node (get-key tree)
                        (get-value tree)
                        (left-branch tree)
                        (adjoin-tree key value (right-branch tree))))))

    (define (lookup key-1 key-2)
      (let ((subtable (assoc key-1 (cdr local-table))))
        (if subtable
            (element-of-tree key-2 (cadr subtable))
            #f)))
    (define (insert! key-1 key-2 value)
      (let ((subtree (assoc key-1 (cdr local-table))))
        (if subtree
            (set-cdr! subtree (list (adjoin-tree key-2 value (cadr subtree))))
            (set-cdr! local-table
                      (cons (list key-1
                                  (make-node key-2 value '() '()))
                            (cdr local-table)))))
      'ok)
    (define (print) (display local-table) (newline))
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            ((eq? m 'print-proc) print)
            (else (error "Unknown operation -- TABLE" m))))
    dispatch))

(define operation-table (make-table))
(define get (operation-table 'lookup-proc))
(define put (operation-table 'insert-proc!))
(define print (operation-table 'print-proc))

(put 'alpha 1 'a)
(put 'beta 1 'a)
(put 'alpha 9 'b)
(put 'alpha 5 'c)
(put 'alpha 2 'd)
(put 'alpha 4 'e)
(put 'alpha 6 'f)
(put 'alpha 3 'g)
(put 'alpha 7 'h)

(get 'alpha 1)
(get 'beta 1)
(get 'alpha 9)
(get 'alpha 5)
(get 'alpha 2)
(get 'alpha 4)
(get 'alpha 6)
(get 'alpha 3)
(get 'alpha 7)


